************ C++ Variables ************

1) Variables in C++ is a name given to a memory location. It is the basic unit of storage in a program. 

2) The value stored in a variable can be changed during program execution.
3) A variable is only a name given to a memory location, all the operations done on the variable effects that memory location.
4) In C++, all the variables must be declared before use.


5) How to Declare Variables?

Ans =>  A typical variable declaration is of the form: 
	
	// Declaring a single variable
	type variable_name;
	
	// Declaring multiple variables:
	type variable1_name, variable2_name, variable3_name;
6) A variable name can consist of alphabets (both upper and lower case), numbers, and the underscore ‘_’ character. 
7) A variable name  not start with a number. 

8) Examples:  

	// Declaring float variable
	float simpleInterest; 
	
	// Declaring integer variable
	int time, speed; 
	
	// Declaring character variable
	char var;  
9) Rules For Declaring Variable
	a) The name of the variable contains letters, digits, and underscores.
    b) The name of the variable is case sensitive (ex Arr and arr both are different variables).
    c) The name of the variable does not contain any whitespace and special characters (ex #,$,%,*, etc).
    d) All the variable names must begin with a letter of the alphabet or an underscore(_). 
    e) We cannot used C++ keyword(ex float,double,class)as a variable name.
10) Valid variable names:

	int x;   //can be letters 
	int _yz; //can be underscores   
	int z40;//can be letters   
11) Invalid variable names:

	int 89; Should not be a number   
	int a b; //Should not contain any whitespace    
	int double;// C++ keyword CAN NOT BE USED  
	
12) Difference Between Variable Declaration and Definition
	1) The variable declaration refers to the part where a variable is first declared or introduced before its first use.
	2) A variable definition is a part where the variable is assigned a memory location and a value.
	3)  Most of the time, variable declaration and definition are done together.
    4) See  the following C++ program for better clarification:   

	// C++ program to show difference between
	// definition and declaration of a 
	// variable
	#include <iostream>
	using namespace std;
	
	int main()
	{
		// this is declaration of variable a
		int a;
	
		// this is initialisation of a
		a = 10;
	
		// this is definition = declaration + initialisation
		int b = 20;
	
		// declaration and definition
		// of variable 'a123'
		char a123 = 'a';
	
		// This is also both declaration and definition
		// as 'c' is allocated memory and
		// assigned some garbage value.
		float c;
	
		// multiple declarations and definitions
		int _c, _d45, e;
	
		// Let us print a variable
		cout << a123 << endl;
	
		return 0;
	}
	
	output => a
	
13) Types of Variables
	There are three types of variables based on the scope of variables in C++
	
	1) Local Variables
	2) Instance Variables
	3) Static Variables  
	
	1) Local Variables: 
		a) A variable defined within a block or method or constructor is called a local variable. 
        b) These variables are created when entered into the block or the function is called and destroyed after exiting from the block or when the call returns from the function.
        c) The scope of these variables exists only within the block in which the variable is declared. i.e. we can access this variable only within that block.
        d) Initialization of Local Variable is Mandatory.
        
    2) Instance Variables: 
		a) Instance variables are non-static variables and are declared in a class outside any method, constructor, or block. 
        b) As instance variables are declared in a class, these variables are created when an object of the class is created and destroyed when the object is destroyed.
        c) Unlike local variables, we may use access specifiers for instance variables. If we do not specify any access specifier then the default access specifier will be used.
        d) Initialization of Instance Variable is not Mandatory.
        e) Instance Variable can be accessed only by creating objects.
        
    3) Static Variables: 
		a) Static variables are also known as Class variables. 
        b) These variables are declared similarly as instance variables, the difference is that static variables are declared using the static keyword within a class outside any method constructor or block.
        c) Unlike instance variables, we can only have one copy of a static variable per class irrespective of how many objects we create.
        d) Static variables are created at the start of program execution and destroyed automatically when execution ends.
        e) Initialization of Static Variable is not Mandatory. Its default value is 0
        f) If we access the static variable like the Instance variable (through an object), the compiler will show the warning message and it won’t halt the program. 
		   The compiler will replace the object name with the class name automatically.
		g) If we access the static variable without the class name, the Compiler will automatically append the class name.
		
		
		
	4) The syntax for static and instance variables:
		class Example
		{
		    static int a; // static variable
		    int b;        // instance variable	
		
		}
